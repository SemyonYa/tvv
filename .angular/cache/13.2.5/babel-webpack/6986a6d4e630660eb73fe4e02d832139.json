{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"search\"];\nexport let SearchInputComponent = /*#__PURE__*/(() => {\n  class SearchInputComponent {\n    constructor() {\n      this.onChange = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      fromEvent(this.searchElem.nativeElement, 'input').pipe(debounceTime(600)).subscribe( // TODO: type ?\n      e => {\n        const value = e.target['value'].trim();\n        this.onChange.emit(value);\n      });\n    }\n\n  }\n\n  SearchInputComponent.ɵfac = function SearchInputComponent_Factory(t) {\n    return new (t || SearchInputComponent)();\n  };\n\n  SearchInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SearchInputComponent,\n    selectors: [[\"i-search-input\"]],\n    viewQuery: function SearchInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchElem = _t.first);\n      }\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"type\", \"text\", \"role\", \"search\", \"placeholder\", \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0443\", 1, \"search\"], [\"search\", \"\"]],\n    template: function SearchInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"input\", 0, 1);\n      }\n    },\n    styles: [\"\"]\n  });\n  return SearchInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}