{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nexport class RestService {\n  constructor(http, ui) {\n    this.http = http;\n    this.ui = ui;\n    this.list$ = new BehaviorSubject(null);\n\n    this.tConstructor = item => {\n      return this.responseToCamelCase(item);\n    };\n\n    this.formValueToSnake = formValue => {\n      let newValue = {};\n\n      for (let key in formValue) {\n        newValue[key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)] = typeof formValue[key] === 'boolean' ? 1 : formValue[key];\n      }\n\n      return newValue;\n    };\n\n    this.responseToCamelCase = response => {\n      var newObj = {};\n\n      for (let d in response) {\n        if (response.hasOwnProperty(d)) {\n          newObj[d.replace(/(\\_\\w)/g, function (k) {\n            return k[1].toUpperCase();\n          })] = response[d];\n        }\n      }\n\n      return newObj;\n    };\n\n    this.handleError = err => {\n      if (this.errorTimeout) clearTimeout(this.errorTimeout);\n      let errorText;\n\n      if (err.status === 422) {\n        errorText = err.error.map(e => e.message).join('\\n');\n      } else if (err.status < 500 && err.status >= 400) {\n        errorText = err.message;\n      } else {\n        errorText = 'It\\'s a SAD  :-(';\n      }\n\n      this.list$.next([]);\n      this.ui.showError(`${errorText}`);\n      this.errorTimeout = setTimeout(() => {\n        this.ui.hideError();\n      }, 5000);\n    };\n  }\n\n  get url() {\n    return `${environment.baseUrl}${this.route}`;\n  }\n\n  getAll(params = new HttpParams()) {\n    this.list$.next(null);\n    this.http.get(this.url, {\n      params\n    }).pipe(map(items => {\n      return items.map(this.tConstructor);\n    }) // catchError(err => {\n    //   console.log(err);\n    //   return throwError(err);\n    // })\n    ).subscribe(items => {\n      this.list$.next(items);\n    }, this.handleError);\n  }\n\n  get(id) {\n    return this.http.get(`${this.url}/${id}`).pipe(map(this.tConstructor));\n  }\n\n  post(item) {\n    return this.http.post(this.url, this.formValueToSnake(item)).pipe(map(this.tConstructor));\n  }\n\n  put(item, id) {\n    return this.http.put(`${this.url}/${id}`, this.formValueToSnake(item)).pipe(map(this.tConstructor));\n  }\n\n  patch(partialItem, id) {\n    return this.http.patch(`${this.url}/${id}`, this.formValueToSnake(partialItem)).pipe(map(this.tConstructor));\n  }\n\n  delete(id) {\n    return this.http.delete(`${this.url}/${id}`).pipe(map(this.tConstructor));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}