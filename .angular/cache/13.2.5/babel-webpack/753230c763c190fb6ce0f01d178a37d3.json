{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.route = '/public-data';\n\n      this.formValueToSnake = formValue => {\n        let newValue = {};\n\n        for (let key in formValue) {\n          newValue[key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)] = typeof formValue[key] === 'boolean' ? 1 : formValue[key];\n        }\n\n        return newValue;\n      };\n\n      this.responseToCamelCase = response => {\n        var newObj = {};\n\n        for (let d in response) {\n          if (response.hasOwnProperty(d)) {\n            newObj[d.replace(/(\\_\\w)/g, function (k) {\n              return k[1].toUpperCase();\n            })] = response[d];\n          }\n        }\n\n        return newObj;\n      };\n    }\n\n    get url() {\n      return `${environment.baseUrl}${this.route}`;\n    }\n\n    getPlaces(region) {\n      return this.http.get(`${this.url}/places/${region}`).pipe(map(items => {\n        return items.map(item => {\n          let ctor = this.responseToCamelCase(item);\n          ctor.items = item['items'].map(i => this.responseToCamelCase(i));\n          return ctor;\n        });\n      }));\n    }\n\n    getPlace(placeId) {\n      return this.http.get(`${this.url}/place/${placeId}`).pipe(map(item => {\n        let ctor = this.responseToCamelCase(item);\n        ctor.items = item['items'].map(i => this.responseToCamelCase(i));\n        return ctor;\n      }));\n    }\n\n    getProject(projectId) {\n      return this.http.get(`${this.url}/project/${projectId}`).pipe(map(item => {\n        console.log(item);\n        let ctor = this.responseToCamelCase(item);\n        ctor.items = item['items'].map(i => this.responseToCamelCase(i));\n        return ctor;\n      }));\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}