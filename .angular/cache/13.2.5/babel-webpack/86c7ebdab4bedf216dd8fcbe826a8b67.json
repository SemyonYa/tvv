{"ast":null,"code":"import { formatDate } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction GridRowComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const field_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", field_r2, \" \");\n  }\n}\n\nfunction GridRowComponent_div_2_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GridRowComponent_div_2_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.edit();\n    });\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridRowComponent_div_2_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function GridRowComponent_div_2_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.delete();\n    });\n    i0.ɵɵelement(1, \"img\", 8);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridRowComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, GridRowComponent_div_2_button_1_Template, 2, 0, \"button\", 5);\n    i0.ɵɵtemplate(2, GridRowComponent_div_2_button_2_Template, 2, 0, \"button\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.withEdit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.withDelete);\n  }\n}\n\nexport let GridRowComponent = /*#__PURE__*/(() => {\n  class GridRowComponent {\n    constructor() {\n      this.fields = []; // @Input() exclude: string[] = [];\n\n      this.onEdit = new EventEmitter();\n      this.onDelete = new EventEmitter();\n      this.onDoubleClick = new EventEmitter();\n      this.itemAsArray = [];\n    }\n\n    ngOnInit() {\n      for (let field of this.fields) {\n        if (field in this.item) {\n          if (typeof this.item[field] === 'number' || typeof this.item[field] === 'string') {\n            this.itemAsArray.push(this.item[field]);\n          } else if (typeof this.item[field] === 'boolean') {\n            this.itemAsArray.push(this.item[field].toString());\n          } else if (typeof this.item[field] === 'object') {\n            if (this.item[field] instanceof Date) {\n              this.itemAsArray.push(formatDate(this.item[field], 'dd.MM.y HH:mm', 'en-EN'));\n            }\n          }\n        }\n      } // for (let key in this.item) {\n      //   const field = this.item[key];\n      //   if (!this.exclude.includes(key)) {\n      //     if (typeof field === 'number' || typeof field === 'string') {\n      //       this.itemAsArray.push(field)\n      //     } else if (typeof field === 'boolean') {\n      //       this.itemAsArray.push(field.toString())\n      //     } else if (typeof field === 'object') {\n      //       if (field instanceof Date) {\n      //         this.itemAsArray.push(formatDate(field, 'dd.MM.y HH:mm', 'en-EN'));\n      //       }\n      //     }\n      //   }\n      // }\n\n    }\n\n    edit() {\n      this.onEdit.emit(this.item.id);\n    }\n\n    delete() {\n      this.onDelete.emit(this.item.id);\n    }\n\n    doubleClick() {\n      this.onDoubleClick.emit(this.item.id);\n    }\n\n  }\n\n  GridRowComponent.ɵfac = function GridRowComponent_Factory(t) {\n    return new (t || GridRowComponent)();\n  };\n\n  GridRowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GridRowComponent,\n    selectors: [[\"i-grid-row\"]],\n    inputs: {\n      item: \"item\",\n      withEdit: \"withEdit\",\n      withDelete: \"withDelete\",\n      fields: \"fields\"\n    },\n    outputs: {\n      onEdit: \"onEdit\",\n      onDelete: \"onDelete\",\n      onDoubleClick: \"onDoubleClick\"\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"table-body-row\", 3, \"dblclick\"], [\"class\", \"table-cell\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"table-cell actions\", 4, \"ngIf\"], [1, \"table-cell\"], [1, \"table-cell\", \"actions\"], [\"class\", \"icon\", 3, \"click\", 4, \"ngIf\"], [1, \"icon\", 3, \"click\"], [\"src\", \"/assets/icons/pencil-outline.svg\", \"alt\", \"EDIT\"], [\"src\", \"/assets/icons/close.svg\", \"alt\", \"CLOSE\"]],\n    template: function GridRowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"dblclick\", function GridRowComponent_Template_div_dblclick_0_listener() {\n          return ctx.doubleClick();\n        });\n        i0.ɵɵtemplate(1, GridRowComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵtemplate(2, GridRowComponent_div_2_Template, 3, 2, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.itemAsArray);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.withEdit || ctx.withDelete);\n      }\n    },\n    directives: [i1.NgForOf, i1.NgIf],\n    styles: [\".table-body-row[_ngcontent-%COMP%]{display:flex}.table-cell[_ngcontent-%COMP%]{flex:1 0 100px}.table-cell[_ngcontent-%COMP%]:first-child{flex:1 0 50px}\"]\n  });\n  return GridRowComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}